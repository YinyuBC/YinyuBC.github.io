<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[virtual function]]></title>
    <url>%2F2019%2F05%2F11%2Fvirtual-function%2F</url>
    <content type="text"><![CDATA[https://study.163.com/course/courseLearn.htm?courseId=271005#/learn/video?lessonId=394166&amp;courseId=271005 翁恺老师在视频的4:25中提到“只要在它的继承树当中某一个祖先的函数被设为virtual，以后子子孙孙不管你说不说，都默认为virtual” 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;iostream&gt;using namespace std;class A&#123; int va;public: A() &#123; va = 0; &#125; A(int a) &#123; va = a; &#125; virtual void disp();&#125;;void A::disp()&#123; cout &lt;&lt; &quot;va = &quot; &lt;&lt; va &lt;&lt; &quot;\n&quot;;&#125;class B: public A&#123; int vb;public: B(): A() &#123; vb = 0; &#125; B(int a, int b): A(a) &#123; vb = b; &#125; void disp(); &#125;;void B::disp()&#123; A::disp(); cout &lt;&lt; &quot;vb = &quot; &lt;&lt; vb &lt;&lt; &quot;\n&quot;;&#125;class C: public B&#123; int vc;public: C(): B() &#123; vc = 0; &#125; C(int a, int b, int c): B(a, b) &#123; vc = c; &#125; void disp();&#125;;void C::disp() &#123; B::disp(); cout &lt;&lt; &quot;vc = &quot; &lt;&lt; vc &lt;&lt; &quot;\n&quot;;&#125;int main()&#123; A dt1(10); B dt2(200, 300); C dt3(4000, 5000, 6000); A* p; p = &amp;dt1; p-&gt;disp(); printf(&quot;\n&quot;); p = &amp;dt2; p-&gt;disp(); printf(&quot;\n&quot;); p = &amp;dt3; p-&gt;disp(); printf(&quot;\n&quot;); return 0;&#125; 将main函数修改如下 发现即使class B中disp()前未加virtual,但因为它的祖先A的disp()被设为virtual，以后子子孙孙不管你说不说，都默认为virtual，所以虚函数仍可用123456789101112131415161718192021int main()&#123; A dt1(10); B dt2(200, 300); C dt3(4000, 5000, 6000); B* p;// p = &amp;dt1;// p-&gt;disp();// printf(&quot;\n&quot;); p = &amp;dt2; p-&gt;disp(); printf(&quot;\n&quot;); p = &amp;dt3; p-&gt;disp(); printf(&quot;\n&quot;); return 0;&#125; 虚函数原来是这样用的12345678910void render(Shape* p) &#123; p-&gt;render();&#125;void func() &#123; Ellipse ell(10, 20); Circle circ(40); render(&amp;ell); render(&amp;circ);&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[img2vdi]]></title>
    <url>%2F2019%2F04%2F13%2Fimg2vdi%2F</url>
    <content type="text"><![CDATA[1vboxmanage convertfromraw bin/ucore.img ucore.vdi]]></content>
  </entry>
  <entry>
    <title><![CDATA[bug]]></title>
    <url>%2F2019%2F04%2F06%2Fbug%2F</url>
    <content type="text"><![CDATA[1interruptstubs.s: Warning: end of file not at end of a line; newline inserted Solution: By adding a newline at the end of the file !]]></content>
  </entry>
  <entry>
    <title><![CDATA[tar]]></title>
    <url>%2F2019%2F04%2F06%2Ftar%2F</url>
    <content type="text"><![CDATA[解压.tar.gz文件1tar -xvf source.tar.gz]]></content>
  </entry>
  <entry>
    <title><![CDATA[start]]></title>
    <url>%2F2019%2F03%2F22%2Fstart%2F</url>
    <content type="text"><![CDATA[1234567#include &lt;bits/stc++.h&gt;using namespace std;int main() &#123; cout &lt;&lt; &quot;hello, hexo!&quot; &lt;&lt; &quot;\n&quot;; return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[bc]]></title>
    <url>%2F2019%2F03%2F22%2Fbc%2F</url>
    <content type="text"><![CDATA[标题一标题二标题三标题四标题五这是加粗 这是斜体 这是横线 无序列表 无序列表 有序列表1 有序列表2 内嵌代码 1代码块 引用]]></content>
  </entry>
</search>
